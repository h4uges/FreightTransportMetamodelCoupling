import logitopp2commonNetwork;
import logitopp2commonPopulation;
import logitopp2commonLogisticNetwork;
import logitopp2commonDemand;
import logitopp2commonSolutionTours;

modeltype COMMON_MM uses CommonFreightTransportMetamodel('http://www.cep-model-coupling.com/commonFreightTransportMetamodel');
modeltype LOGITOPP uses logiToppMetamodel('http://www.cep-model-coupling.com/logiToppMetamodel');

transformation logitopp2common(in logiToppModel: LOGITOPP, out commonModel : COMMON_MM);

main() {
	var logiToppRoot := logiToppModel.objectsOfType(LOGITOPP::dataExchange::SolutionExchangeRoot) -> asSequence() -> first();
	// here we may check for invariats/preconditions
	
	var commonNetwork := logiToppRoot.network.map roadNetwork2Network();
	var commonPopulation := logiToppRoot._population.map population2Population(); 
	var commonLogisticNetwork := logiToppRoot.transportNetwork.map transportInfrastructure2LogisticNetwork(logiToppRoot.demand);
	var commonDemand := logiToppRoot.demand.map demand2Demand(commonLogisticNetwork);
	var commonSolution := logiToppRoot.solution.map solution2Solution(commonLogisticNetwork);
	
	var commonRoot = new COMMON_MM::coupling::CommonFreightTransportMetamodelRoot(commonNetwork, commonPopulation, commonLogisticNetwork, commonDemand, commonSolution);
	cleanupResult(commonModel, commonRoot);
}

mapping LOGITOPP::dataExchange::Solution::solution2Solution(logisticNetwork : COMMON_MM::logisticNetwork::LogisticNetwork) : COMMON_MM::logisticSolution::LogisticSolution {
	tours += self.plannedTours -> map plannedTour2PlannedTour(logisticNetwork);
}

constructor COMMON_MM::coupling::CommonFreightTransportMetamodelRoot::CommonFreightTransportMetamodelRoot(
	network_ : COMMON_MM::network::Network,
	population_ : COMMON_MM::localEntities::Population,
	logisticNetwork_ : COMMON_MM::logisticNetwork::LogisticNetwork,
	demand_ : COMMON_MM::logisticDemand::Demand,
	logisticSolution_ : COMMON_MM::logisticSolution::LogisticSolution
) {
	network := network_;
	_population := population_;
	logisticNetwork := logisticNetwork_;
	demand := demand_;
	logisticSolution := logisticSolution_;
}

helper cleanupResult(model : COMMON_MM, commonRoot : COMMON_MM::coupling::CommonFreightTransportMetamodelRoot) {
	var toBeDeleted := model.rootObjects() -> select(e | e <> commonRoot);
	toBeDeleted -> forEach (e) { model.removeElement(e)};
}
