library logitopp2commonNetwork;

modeltype COMMON_MM uses CommonFreightTransportMetamodel('http://www.cep-model-coupling.com/commonFreightTransportMetamodel');
modeltype LOGITOPP uses logiToppMetamodel('http://www.cep-model-coupling.com/logiToppMetamodel');

property coordinateEqualityTolerance = 0.000000001;
property edgePositionTolerance = 0.000000001;
property locationIdCounter = 0;

mapping LOGITOPP::mobiTopp::network::RoadNetwork::roadNetwork2Network() : COMMON_MM::network::Network {
	nodes += self.nodes -> map node2Node();
	edges += self.edges -> map edge2Edge();
}

mapping LOGITOPP::mobiTopp::network::Node::node2Node() : COMMON_MM::network::Node {
	id := self.id;
	coordinate := point2D2Coordinate(self.coord);
}

helper point2D2Coordinate(point2D : LOGITOPP::mobiTopp::network::Point2D) : COMMON_MM::utils::Coordinate {
	return new COMMON_MM::utils::Coordinate(point2D.x, point2D.y);
}

constructor COMMON_MM::utils::Coordinate::Coordinate(x : Real, y : Real) {
	result.x := x;
	result.y := y;
}

mapping LOGITOPP::mobiTopp::network::Edge::edge2Edge() : COMMON_MM::network::Edge {
	id := self.id;
	_from := self._from.resolveone(COMMON_MM::network::Node);
	to := self.to.resolveone(COMMON_MM::network::Node);
	length := self.length;
	// missing: allowedVehicleTypes
}

// ---- network.location ----

helper location2Location(location : LOGITOPP::mobiTopp::network::Location, identifier : String) : COMMON_MM::network::Location {
	var id := createLocationId();
	var coordinate := point2D2Coordinate(location.coordinate);
	var networkAccess := new COMMON_MM::network::EdgeBasedNetworkAccess(location.roadAccessEdge, location.roadPosition);
	
	return new COMMON_MM::network::Location(id, identifier, coordinate, networkAccess);
}

constructor COMMON_MM::network::Location::Location(id : String, identifier: String, coordinate : COMMON_MM::utils::Coordinate, networkAccess: COMMON_MM::network::NetworkAccess) {
	result.id := "loc_" + id + "_" + identifier;
	result.coordinate := coordinate;
	result.networkAccess := networkAccess;
}

helper createLocationId() : String {
	var id = locationIdCounter.toString();
	locationIdCounter := locationIdCounter + 1;
	return id;
}

constructor COMMON_MM::network::EdgeBasedNetworkAccess::EdgeBasedNetworkAccess(edge_ : LOGITOPP::mobiTopp::network::Edge, edgePostion_ : Real) {
	edge := edge_.resolveone(COMMON_MM::network::Edge);
	edgePosition := edgePostion_;
}

helper areEqualLocations(a : COMMON_MM::network::Location, b : COMMON_MM::network::Location) : Boolean {
	var aEdgeBasedAccess := a.networkAccess.oclAsType(COMMON_MM::network::EdgeBasedNetworkAccess);
	var bEdgeBasedAccess := b.networkAccess.oclAsType(COMMON_MM::network::EdgeBasedNetworkAccess);
	
	return areEqual(a.coordinate.x, b.coordinate.x, coordinateEqualityTolerance) and
  	areEqual(a.coordinate.y, b.coordinate.y, coordinateEqualityTolerance) and
  	aEdgeBasedAccess.edge = bEdgeBasedAccess.edge and
  	areEqual(aEdgeBasedAccess.edgePosition, bEdgeBasedAccess.edgePosition, edgePositionTolerance);
}

helper areEqual(r1 : Real, r2 : Real, epsilon : Real) : Boolean {
    return (r1 - r2).abs() < epsilon;
}