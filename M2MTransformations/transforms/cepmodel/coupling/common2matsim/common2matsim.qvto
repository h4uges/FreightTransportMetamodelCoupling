import common2matsimBaseMappings;
import common2matsimNetwork;
import common2matsimVehicleTypes;
import common2matsimCarrierCapabilities;
import common2matsimCarrierDemand;
import common2matsimCarrierDemandWithSolution;
import common2matsimCarrierSolution;

modeltype COMMON_MM uses CommonFreightTransportMetamodel('http://www.cep-model-coupling.com/commonFreightTransportMetamodel');
modeltype MATSIM uses MATSimFreightMetamodel('http://www.cep-model-coupling.com/MATSimFreightMetamodel');

transformation common2matsim(in commonModel: COMMON_MM, out matsimModel : MATSIM);

main() {
	var commonRoot := commonModel.objectsOfType(COMMON_MM::coupling::CommonFreightTransportMetamodelRoot) -> asSequence() -> first();
	
	// TODO: check for invariants
	// inv: singe day representation
	// inv: only volume or only capacity based
	// inv: shipment only referenced in one tour
	// inv: ...
	
	// network
	var matSimNetwork := commonRoot.network -> map network2network() -> asSequence() -> first();
	
	// vehicle types
	var allVehicles := commonRoot.logisticNetwork.CEPSPs -> collect(cepsp | cepsp.vehicleDepots -> collect(depot | depot.vehicles) -> flatten()) -> flatten();
	var matSimVehicleTypes := createVehicleTypes(allVehicles);
	
	// skip: transformation of population
	
	// carrier
	var demand := commonRoot.demand -> asSequence() -> first();
	var carriers := commonRoot.logisticNetwork.CEPSPs;
	var solution := commonRoot.logisticSolution;
	var matSimCarriers := createCarriers(carriers, demand, solution, matSimVehicleTypes);
	
	var matSimRoot := new MATSIM::dataExchange::DataExchangeRoot(matSimNetwork, matSimVehicleTypes, matSimCarriers);
	
	cleanupResult(matsimModel, matSimRoot);
}

constructor MATSIM::dataExchange::DataExchangeRoot::DataExchangeRoot(
	networkElem : MATSIM::matsim::core::network::Network,
	vehicleTypesElem : MATSIM::matsim::vehicles::VehicleTypes,
	carrierElems: Collection(MATSIM::freightContrib::Carrier)) {
	network := networkElem;
	vehicleTypes := vehicleTypesElem;
	carriers += carrierElems;
}

helper cleanupResult(model : MATSIM, matSimRoot : MATSIM::dataExchange::DataExchangeRoot) {
	var toBeDeleted := model.rootObjects() -> select(e | e <> matSimRoot);
	toBeDeleted -> forEach (e) { model.removeElement(e)};
}

helper createCarriers(carriers : Collection(COMMON_MM::logisticNetwork::CEPSP), demand : COMMON_MM::logisticDemand::Demand, solution : COMMON_MM::logisticSolution::LogisticSolution, matSimVehicleTypes : MATSIM::matsim::vehicles::VehicleTypes) : Collection(MATSIM::freightContrib::Carrier) {
	var matSimCarriers := carriers -> map cepsp2InitialCarrier(matSimVehicleTypes);
	
	if(solution = null) then {
		demand.shipments -> forEach(shipment) {createAndAssignShipment(shipment)};
	} else {
		demand.shipments -> forEach(shipment) {createAndAssignShipmentWithSolution(shipment, solution)};
	} endif;
	solution.tours -> forEach(tour) {createAndAssignTour(tour)};
	
	return matSimCarriers;
}